load_all()
document()
document()
load_all()
test()
document()
library(usethis)
library(devtools)
library(data.table)
document()
load_all()
test()
use_testthat()
use_test("S_calculation_PCA")
set.seed(455)
p<-100
n<-1000
X<-matrix(rnorm(n*p),n,p)
Sigma<-t(X)%*%X/n
clusters<-rep(1:20,each=5)
S_calculation_PCA(Sigma,clusters,r=5)
use_r("S_calculation_PCA")
document()
load_all()
document()
test()
check()
use_r("KnockoffCDGE")
document()
check()
# use_testthat()
# use_test("KO_filter")
use_r("Z_calculation")
use_r("S_calculation_ME")
document()
use_r("tau_calculation")
use_r("KO_filter")
is_null_gene_info<-is.null(Gene_info)
document()
check()
r<-readline("What is the number of principal components to be conditioned on?")
r
as.integer("abc")
Sigma
r<-readline(paste0("What is the number of principal components to be conditioned on? (Please input integer from 1 to ",p,")"))
use_test("S_calculation_PCA")
set.seed(455)
p<-100
n<-1000
X<-matrix(rnorm(n*p),n,p)
Sigma<-t(X)%*%X/n
clusters<-rep(1:20,each=5)
p<-length(clusters)
r<-readline(paste0("What is the number of principal components to be conditioned on? (Please input integer from 1 to ",p,")"))
while(TRUE)
{
r<-readline(paste0("What is the number of principal components to be conditioned on? (Please input integer from 1 to ",p,")"))
if(r%in%as.character(1:p))
{
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,")"))
}
}
while(TRUE)
{
r<-readline(paste0("What is the number of principal components to be conditioned on? (Please input integer from 1 to ",p,")\t"))
if(r%in%as.character(1:p))
{
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,")\t"))
}
}
while(TRUE)
{
r<-readline(paste0("What is the number of principal components to be conditioned on? (Please input integer from 1 to ",p,")\n"))
if(r%in%as.character(1:p))
{
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,")\n"))
}
}
while(TRUE)
{
r<-readline(paste0("What is the number of principal components to be conditioned on? Please input integer from 1 to ",p,": "))
if(r%in%as.character(1:p))
{
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,": "))
}
}
{
print(paste0("What is the number of principal components to be conditioned on? Please input integer from 1 to ",p,": "))
while(TRUE)
{
r<-readline()
if(r%in%as.character(1:p))
{
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,": "))
}
}
}
use_r("S_calculation_PCA")
load_all()
document()
load_all()
load_all()
document()
test()
use_r("S_calculation_SDP")
load_all()
document()
library(ghostbasil)
load_all()
document()
test()
check()
use_r("S_calculation_ME")
library(usethis)
library(devtools)
library(data.table)
use_r("S_calculation_ME")
use_r("S_calculation_SDP")
use_r("S_calculation_PCA")
document()
use_test("S_calculation_ME")
library(usethis)
library(devtools)
library(data.table)
use_r("tau_calculation")
use_r("KO_filter")
# use_testthat()
# use_test("KO_filter")
use_r("Z_calculation")
use_r("DGE_result")
#'   \item{baseMean}{Mean of normalized counts for all samples}
#'   \item{log2FoldChange}{Log2 fold change.}
#'   \item{lfcSE}{Standard error of log2 fold change.}
#'   \item{pvalue}{Wald test p-value.}
#'   \item{padj}{BH adjusted p-values.}
#' }
#'
#' #' @examples
#' data(DGE_result)
#' head(DGE_result)
"DGE_result"
use_r("Sigma")
use_r("S_calculation_ME")
use_testthat()
use_r("S_calculation_PCA")
use_test("S_calculation_PCA")
use_r("KnockoffCDGE")
load_all()
document()
test()
document()
test()
S_calculation_PCA<-function(Sigma,r,verbose=TRUE,tol=0.001)
{
p<-nrow(Sigma)
NN1<-Sigma
N_0<-0*Sigma
diag(NN1)<-0
eigs_k<-eigs(NN1,r)
N_1<-(eigs_k$vectors)%*%(t(eigs_k$vectors)*eigs_k$values[1:r])
while(mean(abs(N_1-N_0))>tol)
{
N_0<-N_1
diag(NN1)<-diag(N_0)
eigs_k<-eigs(NN1,r)
N_1<-(eigs_k$vectors)%*%(t(eigs_k$vectors)*eigs_k$values[1:r])
}
S<-(Sigma-N_1)*DD
N_1_list<-list(eigenvalues=eigs_k$values[1:r],eigenvectors=eigs_k$vectors,S=S)
return(N_1_list)
}
set.seed(455)
p<-100
n<-1000
X<-matrix(rnorm(n*p),n,p)
Sigma<-t(X)%*%X/n
S_calculation_PCA(Sigma,r=5)
document()
rm(list = c("S_calculation_PCA"))
load_all()
document()
test()
check()
library(usethis)
library(devtools)
library(data.table)
use_r("tau_calculation")
use_r("KO_filter")
set.seed(433)
tau<-c(runif(20)+0.5,runif(80))
kappa<-c(sample(0:5,20,prob=c(0.8,rep(0.04,5)),replace=TRUE),sample(0:5,80,replace=TRUE))
KO_Filter(tau,kappa,M=5)
# use_testthat()
# use_test("KO_filter")
use_r("Z_calculation")
use_r("DGE_result")
use_r("Sigma")
use_r("is_posdef")
use_r("S_calculation_ME")
use_test("S_calculation_ME")
use_r("S_calculation_SDP")
use_r("S_calculation_PCA")
use_test("S_calculation_PCA")
use_r("KnockoffCDGE")
use_r("KnockoffCDGE")
# use_testthat()
# use_test("KO_filter")
use_r("Z_calculation")
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
Gene_info<-DGE_result
verbose=TRUE
tol=0.001
is_null_gene_info<-is.null(Gene_info)
p<-nrow(Sigma)
Inv_Sigma<-solve(Sigma)
S<-S_calculation_ME(Sigma,M,verbose,tol)
M<-5
S<-S_calculation_ME(Sigma,M,verbose,tol)
EZ_KO<-Z-colSums(Inv_Sigma*Z)*S
V1<-diag((M+1)/M*S)-Inv_Sigma*(S%*%t(S))
V1.right<-chol(V1)
sum(abs(t(V1.right)%*%V1.right-V1))
EZ_KO<-Z-colSums(Inv_Sigma*Z)*S
V1<-diag((M+1)/M*S)-Inv_Sigma*(S%*%t(S))
V1.right<-chol(V1)
Z1<-colSums(V1.right*rnorm(p))
Z2<-matrix(M*p,p,M)
Z2<-Z2-rowMeans(Z2)
print(paste0("What is the number of principal components to be conditioned on? Please input integer from 1 to ",p,": "))
while(TRUE)
{
r<-readline()
if(r%in%as.character(1:p))
{
print("Valid input.")
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,": "))
}
}
print(paste0("What is the number of principal components to be conditioned on? Please input integer from 1 to ",p,": "))
while(TRUE)
{
r<-readline()
if(r%in%as.character(1:p))
{
print("Valid input.")
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,": "))
}
}
N1_list<-S_calculation_PCA(Sigma,r,verbose,tol)
dim(N1_list$eigenvectors)
Z_KO<-((N1_list$eigenvectors)%*%(t(N1_list$eigenvectors)%*%Z))[,1]+matrix(rnorm(p*M),p,M)*sqrt(N1_list$S)
load_all()
document()
test()
check()
library(usethis)
library(devtools)
library(data.table)
load_all()
document()
test()
check()
use_r("KnockoffCDGE")
Sigma
use_test("KO_filter")
use_test("tau_calculation")
use_test("KO_filter")
use_test("S_calculation_ME")
use_test("S_calculation_PCA")
document()
test()
check()
verbose=TRUE
tol=0.001
Gene_info=NULL
M=5
use_r("Z_calculation")
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
p<-nrow(Sigma)
is_null_gene_info<-is.null(Gene_info)
print(paste0("What is the number of principal components to be conditioned on? Please input integer from 1 to ",p,": "))
while(TRUE)
{
r<-readline()
if(r%in%as.character(1:p))
{
print("Valid input.")
r<-as.integer(r)
break
}
else
{
print(paste0("Invalid input. Please input integer from 1 to ",p,": "))
}
}
N1_list<-S_calculation_PCA(Sigma,r,verbose,tol)
Z_KO<-((N1_list$eigenvectors)%*%(t(N1_list$eigenvectors)%*%Z))[,1]+matrix(rnorm(p*M),p,M)*sqrt(N1_list$S)
A<-GhostMatrix(Sigma = Sigma_minus_S,D=S,n.groups = M+1)
library(ghostbasil)
A<-GhostMatrix(Sigma = Sigma_minus_S,D=S,n.groups = M+1)
Sigma_minus_S<-N1_list$eigenvectors%*%(t(N1_list$eigenvectors)*N1_list$eigenvalues)
Sigma_minus_S
A<-GhostMatrix(Sigma = Sigma_minus_S,D=S,n.groups = M+1)
A<-GhostMatrix(Sigma = Sigma_minus_S,D=N1_list$S,n.groups = M+1)
S<-N1_list$S
Z_KO<-((N1_list$eigenvectors)%*%(t(N1_list$eigenvectors)%*%Z))[,1]+matrix(rnorm(p*M),p,M)*sqrt(S)
Sigma_minus_S<-N1_list$eigenvectors%*%(t(N1_list$eigenvectors)*N1_list$eigenvalues)
A<-GhostMatrix(Sigma = Sigma_minus_S,D=S,n.groups = M+1)
gamma_max<-max(abs(rr))
n<-23010
gamma_max<-max(abs(rr))
rr<-c(Z,as.vector(Z_KO))/sqrt(n)
gamma_max<-max(abs(rr))
B<-1000
q_b<-qbeta((1:B-0.5)/B,(M+1)*p,1)
u_b<-qnorm((q_b+1)/2)
gamma_min = kappa*mean(u_b)/sqrt(n)
gamma_max<-max(abs(rr))
B<-1000
q_b<-qbeta((1:B-0.5)/B,(M+1)*p,1)
u_b<-qnorm((q_b+1)/2)
gamma_min = 0.6*mean(u_b)/sqrt(n)
if(gamma_max>gamma_min)
{
gamma_seq<-seq(gamma_max,gamma_min,(gamma_min-gamma_max)/1000)
fitted_model<-ghostbasil(A,r,user.lambdas = gamma_seq)
beta_lasso<-matrix(fitted_model$betas[,ncol(fitted_model$betas)],nrow = p,ncol = M+1)
}else{
beta_lasso<-matrix(0,nrow = p,ncol = M+1)
}
gamma_max<-max(abs(rr))
B<-1000
q_b<-qbeta((1:B-0.5)/B,(M+1)*p,1)
u_b<-qnorm((q_b+1)/2)
gamma_min = 0.6*mean(u_b)/sqrt(n)
if(gamma_max>gamma_min)
{
gamma_seq<-seq(gamma_max,gamma_min,(gamma_min-gamma_max)/1000)
fitted_model<-ghostbasil(A,rr,user.lambdas = gamma_seq)
beta_lasso<-matrix(fitted_model$betas[,ncol(fitted_model$betas)],nrow = p,ncol = M+1)
}else{
beta_lasso<-matrix(0,nrow = p,ncol = M+1)
}
beta_lasso
kappa_ko<-apply(abs(beta_lasso),1,which.max)-1 # Magnitude of gene signal
tau_ko<-apply(abs(beta_lasso),1,tau_cal) # Indicator of whether the signal comes from the true gene or the knockoff copy
kappa_ko<-apply(abs(beta_lasso),1,which.max)-1 # Magnitude of gene signal
tau_ko<-apply(abs(beta_lasso),1,tau_calculation) # Indicator of whether the signal comes from the true gene or the knockoff copy
kappa_ko<-apply(abs(beta_lasso),1,which.max)-1 # Magnitude of gene signal
tau_ko<-apply(abs(beta_lasso),1,tau_calculation) # Indicator of whether the signal comes from the true gene or the knockoff copy
q_value_ko<-KO_Filter(tau_ko,kappa_ko,M=M) # Compute the q-value of KO for CDGE analysis (q-value is of the same use as padj)
CDGE_result<-as.data.frame()
CDGE_result<-data.frame()
CDGE_result$Z<-Z
CDGE_result
Z
CDGE_result$Z<-Z
document()
test()
check()
check()
use_r("S_calculation_PCA")
load_all()
document()
test()
check()
use_r("S_calculation_SDP_no_Julia")
use_test("KnockoffCDGE")
data("DGE_result")
data("Sigma")
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
data("DGE_result")
data("Sigma")
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
KnockoffCDGE(Z,Sigma,M=5,n=23010,method="ME",Gene_info=DGE_result)
document()
load_all()
document()
test()
use_r("S_calculation_SDP")
document()
document()
load_all()
document()
test()
check()
use_r("S_calculation_ME")
document()
use_r("Z_calculation")
use_r("KO_filter")
use_r("KnockoffCDGE")
use_test("KnockoffCDGE")
use_r("KO_filter")
load_all()
document()
check()
use_r("S_calculation_SDP_no_Julia")
use_r("is_posdef")
load_all()
document()
test()
check()
load_all()
use_test("KnockoffCDGE")
data("DGE_result")
data("Sigma")
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
KnockoffCDGE(Z,Sigma,M=5,n=23010,method="ME",Gene_info=DGE_result)
library(usethis)
library(devtools)
library(data.table)
load_all()
use_r("S_calculation_SDP_no_Julia")
load_all()
document()
document()
load_all()
load_all()
document()
test()
check()
use_r("S_calculation_SDP_no_Julia")
use_r("KnockoffCDGE")
load_all()
document()
test()
check()
library(usethis)
library(devtools)
library(data.table)
load_all()
document()
test()
check()
library(usethis)
library(devtools)
library(data.table)
load_all()
document()
test()
check()
load_all()
document()
test()
check()
library(usethis)
library(devtools)
library(data.table)
load_all()
document()
use_test("KnockoffCDGE")
data("DGE_result")
data("Sigma")
head(DGE_result)
head(DGE_result)
Sigma[1:6,1:6]
Z<-Z_calculation(DGE_result$pvalue,DGE_result$log2FoldChange)
Z[1:10]
Z[1:10]
use_r("KnockoffCDGE")
set.seed(433)
KnockoffCDGE(Z,Sigma,M=5,n=23010,method="ME",Gene_info=DGE_result)
CDGE_result<-KnockoffCDGE(Z,Sigma,M=5,n=23010,method="ME",Gene_info=DGE_result,verbose=TRUE,tol=0.001)
head(CDGE_result)
CDGE_result[1:10,]
CDGE_result[1:20,]
use_r("DGE_result")
library(usethis)
library(devtools)
library(data.table)
use_r("DGE_result")
use_r("Sigma")
load_all()
document()
test()
check()
check()
